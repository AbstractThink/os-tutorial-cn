[[file:./README_en.md][English]]

/事先需要 Google 的概念：memory offsets(内存偏移), pointers(指针)/

*目标：学习计算机内存是如何组织的*

请打开 [[http://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf][文档^1]] 的第 14 页，查看内存的布局图。

这节课只有一个目的：学习启动扇区存放在什么地方


我可以直接告诉你，BIOS 把它放在 0x7C00 位置并完成它，但是一个错误的例子将使事情变得更清楚。

我们想在屏幕上打印 X. 我们将尝试 4 种策略，看那一种能够工以及为什么。

*打开 =boot_sect_memory.asm= 文件*

首先，我们定义数据 X, 并添加标号：
#+BEGIN_SRC asm
the_secret:
    db "X"
#+END_SRC

接着我们尝试使用多种不同方式访问 =the_secret= :
1. =mov al, the_secret=
2. =mov al, [the_secret]=
3. =mov al, the_secret + 0x7C00=
4. =mov al, 2d + 0x7C00= , =2d= 是 'X' 在二进制文件中的实际地址

查看代码并阅读注释

编译并运行代码。你应诺会看到一个类似 "1[2¢3X4X" 字符串，字符 1 和 2 后面的字符是随机垃圾。

如果你添加或移除指令，记得以字节为单位计算 X 的偏移，用新值替换 0x2d.

请不要继续到下一个扇区，除非你 100% 地理解了启动扇区偏移以及内在寻址。

** 全局偏移
现在，由于 =0x7c00= 的任何位置的偏移都是不方便的，汇编嚚可以为每个内在地址定义一个 "全局偏移", org 命令如下 :
#+BEGIN_SRC asm
[org 0x7c00]
#+END_SRC
继续打开 =boot_sect_memory_org.asm= ,你将看到在启动扇区打印数据的经典方式。现在尝试 2. 编译并运行代码，你将看到 org 命令是如何影响之前的方法。

请阅读评论，以获得使用和不使用org时的变更的完整解释

[1] 这份教程受到该方档的强烈启发，请阅读顶层 README 以获取更多的信息。
