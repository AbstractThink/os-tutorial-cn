[[file:./README_en.md][English]]

/事先需要 Google 的概念： GDT(全局描述表)/

*目标： GDT 编程*

还记得第 6 节课的段吗？偏移值是用来进行左移来定位额外的间接地址。

在 32 位模式下，段的工作原理有所不同。现在，这个偏移值是GDT中的一个段描述符的索引。这个描述符定义了基地址（32位）、大小（20位）以及其它一些标志位，例如只读、权限等。
为了增加困惑，这个数据结构是分开的。因此，打开 =os-dev.pdf= 这本书，查看34页的图，或者去维基百科上看。

最容易的 GDT 编程是定义两个段，一个是代码段、一个是数据段。不同段之间可以重叠，意味着没有内存保护，但是对于启动来说足够了，我们将再之后的高级语言中进行修正。

比较好奇的是，第一个GDT入口必须为 =0x00= , 以便程序员在管理内存时不出现错误。

而且，CPU 不能直接加载 GDT 地址，而是需要一个叫做 "GDT 描述符" 的中间结构（16位表示大小，32位表示地址）找到实际的 GDT

让我们直接跳转到 GDT 汇编代码。为了理解段中所有的标志位，请参考 os-dev.pdf 文档。这次课程的理论比较复杂。

在下一节课，我们将转换到 32 位保护模式并测试这次的课程。
