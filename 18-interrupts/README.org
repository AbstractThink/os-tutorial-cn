[[file:./README_en.md][English]]

/事先需要 Google 的概念：C types and structs(C 类型与结构体), include guards, type attributes(类型属性): packed, extern, volatile, exceptions/

*目标：建立中断描述符表，处理 CPU 中断*

这节课以及接下来课程的很大程度上受到了 [[https://web.archive.org/web/20160412174753/http://www.jamesmolloy.co.uk/tutorial_html/index.html)][JameM's tutorial]] 的启发。

** 数据类型
首先，我们在 =cpy/types.h= 中定义一些特殊的数据类型，它可以帮助我们解耦数据结构中
原始位与 =chars= 和 =ints= . 我们特意将它放在 =cpu/= 目录，从现在开始，这个目录将是依赖于机器的代码。是的，特定于 x86 的启动代码依然放在 =boot/= 目录下，但是从现在开始，它就是一个孤立的目录了。

一些存在的文件已经被修改为 =u8= , =u16= , =u32= 数据类型。

从现在开始，我们的 C 头文件也会包这些。

** 中断
中断是内核需要处理的主要事情之一。现在我们来实现它，尽可能在未来课程实现接受键盘输入。

另一个中断的例子是：除 0, 溢出，无效操作，页出错，等等。

中断是通过一组和 GDT(第9节课) 类似的条目组成的向量进行处理的。但是我们并不需要使用汇编进行
编程，而是使用 C 语言。

=cpu/idth= =idt_gate= 是如何存放 =idt= 条目的（需要 256 个，即使是 null。否则 CPU 会出错），BIOS 加载的 =idt= 结构 =idt_register= 实际上只是一个内存地址和大小，和 =GDT=
寄存器一样。

最后，我们定义了一对变量用于从汇编代码中访问这些数据结构。

=cpu/idt.c= 只是每个处理函数的结构体。正如你所看到的，毫无疑问就是设置结构体的值，接着调用
=lidt= 汇编代码。

** ISRs
中断服务例程在 CPU 检测到一个中断的时候会执行，通常是一个严重的错误。

我们只需要写足够的代码处理它们，打印一个错误消息，并停机即可。

在 =cpu/isr.h= 中，我们手动定义了 32 个 ISRs。被声明为（extern）。因为它们将在
=cpu/interrupt.asm= 中实现。

在我们跳转到汇编代码之前， 检查 =cpu/isr.c= 文件。如你所见，我们定义了一个一次性安装所有 =isrs= 并加载 =IDT= 的方法，一组错误信息，打印一些信息的高级处理函数。你可以自定义 =isr_handler= 做你臫想做的事。

现在是粘合低级和高级的低级函数 =idt_gage= , 打开 =cpu/interrupt.asm= . 我们定义了一个共用的低级 =ISR= 代码，只是基本的保存恢复状态以及调用 C 代码。
实际的 =ISR= 汇编方法引用自 =cpu/isr.h= .

记住，现在 =register_t= 结构是所有寄存器的表示， 在 =interrupt.asm= 中定义 .

这些都是基本的，现在我们需要从 Makefile 中参考 =cpu/interrupt.asm= , 给内核安装 ISRs ,
并执行它们。注意 CPU 如何做到不停机的，尽管在一些中断之后再停止是一个好办法 .
