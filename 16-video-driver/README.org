[[file:./README_en.md][English]]

/事先需要 Google 的概念：VGA character cells(字符单元), screen offset(屏幕偏移)/

*目标：在屏幕上写一个字符串*

最终，我们可以在屏幕上输出文本。这节课的代码相对多一点，让我们一步步进行。

打开 =drivers/screen.h= 文件，你会看到我们给 VGA 卡驱动定义了一些常量，以及著名的 "内核打印"
函数 =kprint= ，

现在打开 =drivers/screen.c= , 在文件开始部分声明了私有辅助函数，这些函数对 =kprint= 内核 API 函数很有帮助。

还有用到之前课程学过的 =I/O= 端口访问的两个例程， =get= 和 =set_cursor_offset()= .

还有一个直接操作显存地址的例程， =print_char()= .

最后，还有一些很小的辅助函数，用于行号和列号与偏移之间的相互转换。


** kprint_at
=kprint_at= 被调用的时候， =col= 和 =row= 值为 -1, 这表明将字符串打印到当前位置。

它首先设置三个变量， =col= , =row= 以及 =offset= . 之后在 =char*= 迭代地在当前坐标上调用 =print_char= 函数。

记住， =print_char= 本身返回的是下一个光标位置，我们直接在下一次循环中重用它。

=kprint= 是 =kprint_at= 的包装函数。


** print_char
和 =print_at= 一样， =print_char= 也让 =cols/rows= 为 =-1= . 这样可以使用 =ports.c= 例程从硬件中检索出当前光标的位置。

=print_char= 还可以处理新行。这种情况下，我们将下一行的光标位置偏移设置为 =0= .

记住，VGA 单元占两个字节，一个是字符本身，另一个是它的属性。

** kernel.c
我们的新内核最终是打印字符串。

它测试了字符正确位置，跨过多行，行截断，并且最终深尝试写屏幕的边界。这会发生什么呢？

在下一节课我们将学习如何滚动屏幕。
